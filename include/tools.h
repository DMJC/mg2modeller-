#ifndef TOOLS_H
#define TOOLS_H
#include "mg2.h"

typedef void (*callback)(void);

struct tool{
    string name;
    string tooltip;
    string image_filename;
    callback left_click_callback;
    callback right_click_callback;
    callback long_left_click_callback;
    callback long_right_click_callback;
};

void view_move (void);
void view_rotate (void);
void view_zoom (void);
void object_move (void);
void object_rotate (void);
void object_scale (void);
void hierarchy_up (void);
void hierarchy_down (void);
void create_plane (void);
void create_cube (void);
void create_cylinder (void);
void create_cone (void);
void create_sphere (void);
void create_geosphere (void);
void create_rounded_cylinder (void);
void create_rounded_cube (void);
void create_torus (void);
void create_nurbs_plane (void);
void create_nurbs_halfpipe (void);
void create_nurbs_saddle (void);
void create_nurbs_cube (void);
void create_nurbs_cylinder (void);
void create_nurbs_cone (void);
void create_nurbs_sphere (void);
void create_nurbs_torus (void);
void create_metaball_cube (void);
void create_metaball_cylinder (void);
void create_metaball_sphere (void);
void create_metaball_rounded_cylinder (void);
void create_metaball_rounded_cube (void);
void create_metaball_metamuscle (void);
void create_image_light (void);
void create_spot_light (void);
void create_local_light (void);
void create_infinite_light (void);
void create_projector_light (void);
void create_sky_light (void);
void create_goniometric_light (void);
void create_area_light (void);
void create_camera (void);
void create_panoramic_camera (void);
void create_global_physical_wind (void);
void create_local_physical_wind (void);
void deformation_plane (void);
void deformation_pipe (void);
void deformation_object (void);
void sweep (void);
void fillet (void);
void chamfer (void);
void bevel (void);
void macro_sweep (void);
void lathe (void);
void tip (void);
void create_object_grid (void);
void create_object_spline (void);
void create_object_radial (void);
void array_to_group (void);
void draw_panel (void);
void freehand_curve (void);
void material_editor (void);
void threed_paint (void);
void uv_editor (void);
void material_rectangle (void);
void planar_uv (void);
void cubic_uv (void);
void spherical_uv (void);
void cylindrical_uv (void);
void uv_unwrap (void);
void uv_slice (void);
void shrinkwrap_uv (void);
void normalise_location (void);
void normalise_rotation (void);
void normalise_scale (void);
void center_axes (void);
void show_axes (void);
void select_object (void);
void global_panel (void);
void unhide_objects (void);
void object_notes (void);
void select_context (void);
void select_vertices (void);
void select_edges (void);
void select_faces (void);
void named_selection (void);
void lasso_selection (void);
void rectangle_selection (void);
void freehand_selection (void);
void toggle_grid (void);
void snap_vertex (void);
void snap_edge (void);
void snap_face (void);
void magnetic_tool (void);
void collision_disabled (void);
void collision_ground (void);
void collision_peers (void);
void new_scene (void);
void undo (void);
void redo (void);
void object_copy (void);
void glue_object_as_child (void);
void glue_object_as_sibling (void);
void object_unglue (void);
void object_group (void);
void object_ungroup (void);
void object_erase (void);
void button_finder (void);
#endif // TOOLS_H
